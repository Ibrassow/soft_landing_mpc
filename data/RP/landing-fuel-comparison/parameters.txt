# Timestep
dt = 1
m0 = 2000
mf = 300
solver='ECOS'


sl = SoftLander()
sl.set_thrust_limits(0, 24000)
sl.set_masses(m0, mf)
sl.set_glideslope(30)
sl.set_thrust_pointing(70)
sl.set_vmax(90)
Ad, Bd, Dd = sl.set_dynamics(dt)


# Landing target on the y-z surface
landing_target = np.array([0,0,0]) 
X0 = np.array([2400, 450,-330,-10,-40,10, np.log(m0)])


## Number of knot points
N = 48


def add_control_disturbances():
    w = np.zeros(4)
    # Thursters
    w[:3] = np.random.normal(0, 0.5, 3)
    return w

def add_state_disturbances():
    w = np.zeros(7)
    # position less than 1m
    w[:3] = np.random.normal(0, 0.5, 3)
    # velocity - less than 1cm/sec 
    w[3:6] = np.random.normal(0, 0.1, 3)
    # mass
    unc_mass = 1
    unc_val = np.log( 1 + ( unc_mass / np.exp(X0[6]) )) ##Special case for mass
    w[6] = np.random.normal(0, unc_val, 1)
    return w


if N > 15:
    wu = add_control_disturbances()
else:
    wu = np.zeros(4)


